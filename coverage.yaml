name: Run Coverage and Extract Data

on: [push, pull_request]

jobs:
  run-coverage:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Search and run make_coverage.bat
      run: |
        $file = Get-ChildItem -Path . -Filter make_coverage.bat -Recurse
        if ($file) {
          & $file.FullName
        } else {
          Write-Error "make_coverage.bat not found"
        }
      shell: pwsh

    - name: Search for coverage.xml
      id: find_coverage
      run: |
        $file = Get-ChildItem -Path . -Filter coverage.xml -Recurse
        if ($file) {
          Write-Output "::set-output name=coverage_path::$($file.FullName)"
        } else {
          Write-Error "coverage.xml not found"
        }
      shell: pwsh

    - name: Extract coverage data
      id: extract_coverage
      run: |
        $coveragePath = "${{ steps.find_coverage.outputs.coverage_path }}"
        if (Test-Path $coveragePath) {
          $coverageData = Get-Content $coveragePath
          # Extract the coverage data as needed
          $coverageSummary = "Coverage data extracted: " + $coverageData
          Write-Output "::set-output name=coverage_summary::$coverageSummary"
        } else {
          Write-Error "coverage.xml not found"
        }
      shell: pwsh

    - name: Post coverage data to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const coverageSummary = `Coverage Summary:\n${{ steps.extract_coverage.outputs.coverage_summary }}`
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageSummary
          })

    - name: Deploy coverage data to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p out
        echo "${{ steps.extract_coverage.outputs.coverage_summary }}" > out/index.html
      shell: bash

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./out